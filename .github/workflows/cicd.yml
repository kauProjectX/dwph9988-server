name: Node.js Docker CI/CD

on:
  push:
    branches:
      - '*'

jobs:
  lint-and-audit:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      - run: npm ci
      - run: npm run lint
      - run: npm audit --audit-level=moderate

  build-and-deploy:
    needs: lint-and-audit
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/my-node-app:latest
            ${{ secrets.DOCKER_USERNAME }}/my-node-app:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/my-node-app:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/my-node-app:buildcache,mode=max
      - name: Deploy to NCP
        env:
          HOST: ${{ secrets.SERVER_HOST }}
          USERNAME: ${{ secrets.SERVER_USERNAME }}
          PRIVATE_KEY: ${{ secrets.SERVER_PRIVATE_KEY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          CONTAINER_PORT: ${{ secrets.CONTAINER_PORT }}
          HOST_PORT: ${{ secrets.HOST_PORT }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          JWT_ACCESS_EXPIRES_IN: ${{ secrets.JWT_ACCESS_EXPIRES_IN }}
          JWT_REFRESH_EXPIRES_IN: ${{ secrets.JWT_REFRESH_EXPIRES_IN }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          envsubst < docker-compose.yml > temp-docker-compose.yml
          scp -o StrictHostKeyChecking=no -i private_key.pem temp-docker-compose.yml $USERNAME@$HOST:/root/app/docker-compose.yml
          ssh -o StrictHostKeyChecking=no -i private_key.pem $USERNAME@$HOST << EOF
            docker compose -f /root/app/docker-compose.yml pull
            docker compose -f /root/app/docker-compose.yml up -d
            docker image prune -f
          EOF
          rm private_key.pem temp-docker-compose.yml
