name: Node.js Docker CI/CD

on:
  push:
    branches:
      - '*' # 모든 브랜치에서 푸시할 때 실행, 배포는 하지 않음
  pull_request:
    branches:
      - main # main으로 PR이 오면 실행

jobs:
  build-and-test:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-node-app:${{ github.sha }} .
          docker tag ${{ secrets.DOCKER_USERNAME }}/my-node-app:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/my-node-app:latest

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-node-app:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/my-node-app:latest

  deploy:
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Deploy to server
        env:
          HOST: ${{ secrets.SERVER_HOST }}
          USERNAME: ${{ secrets.SERVER_USERNAME }}
          PRIVATE_KEY: ${{ secrets.SERVER_PRIVATE_KEY }}
          DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          CONTAINER_PORT: ${{ secrets.CONTAINER_PORT }}
          HOST_PORT: ${{ secrets.HOST_PORT }}
        run: |
          # Private key file setup for SSH connection
          printf "%s\n" "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # Create a temporary docker-compose.yml with environment variables
          envsubst < docker-compose.yml > temp-docker-compose.yml

          # Copy temporary Docker Compose file to remote server
          scp -o StrictHostKeyChecking=no -i private_key.pem temp-docker-compose.yml $USERNAME@$HOST:/root/app/docker-compose.yml

          # Connect to server and deploy the service using pulled Docker image
          ssh -o StrictHostKeyChecking=no -i private_key.pem $USERNAME@$HOST << EOF
            export DOCKER_ACCESS_TOKEN="$DOCKER_ACCESS_TOKEN"
            export DOCKER_USERNAME="$DOCKER_USERNAME"
            echo "$DOCKER_ACCESS_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker compose -f /root/app/docker-compose.yml pull
            docker compose -f /root/app/docker-compose.yml up -d
          EOF

          # Clean up temporary files
          rm private_key.pem temp-docker-compose.yml
