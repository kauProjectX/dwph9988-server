// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Members {
  id          BigInt    @id @default(autoincrement())
  kakaoId     String    @unique // 카카오 고유 ID (필수)
  email       String?   // 카카오 이메일 (선택적)
  userName    String    // 카카오 닉네임
  userType    UserType  @default(GUARDIAN)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // 관계 정의
  protectingUsers Protect[] @relation("GuardianToProtect") // 내가 보호하는 사용자들
  protectedByUsers Protect[] @relation("ElderlyToProtect") // 나를 보호하는 사용자들
  devices         Devices[]  // 사용자의 디바이스 정보
  rewards         Rewards[]  // 사용자의 리워드 정보
  heatWaves       HeatWave[] // 사용자의 폭염 정보

  @@map("members")
}

model Protect {
  id              BigInt      @id @default(autoincrement())
  guardianId      BigInt      // 보호자 ID
  elderlyId       BigInt      // 어르신 ID
  status          String      // PENDING, ACTIVE, REJECTED, INACTIVE
  requestType     String      // SMS, KAKAO
  verificationCode String?    // 인증번호
  codeExpiredAt   DateTime?   // 인증번호 만료시간
  verifiedAt      DateTime?   // 인증 완료 시간
  rejectedAt      DateTime?   // 거절 시간
  rejectedReason  String?     // 거절 사유
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  guardian        Members     @relation("GuardianToProtect", fields: [guardianId], references: [id])
  elderly         Members     @relation("ElderlyToProtect", fields: [elderlyId], references: [id])

  @@map("protect")
}

model Devices {
  id              BigInt      @id @default(autoincrement()) @map("devices_idx")
  deviceToken     String?     @map("devices_token") @db.VarChar(255)
  lastLoggedInAt  DateTime?   @map("last_logged_in_at") @db.Timestamp(0)
  deviceType      DeviceType? @map("deveices_type")
  member          Members     @relation(fields: [memberId], references: [id])
  memberId        BigInt      @map("members_id")

  @@map("devices")
}

model Rewards {
  id          BigInt    @id @default(autoincrement()) @map("rewards_idx")
  member      Members   @relation(fields: [memberId], references: [id])
  memberId    BigInt    @map("members_idx")
  money       BigInt    @map("money")
  content     String?   @db.Text
  prefixMoney BigInt    @map("prefix_money")
  createdAt   DateTime  @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at") @db.Timestamp(0)

  @@map("rewards")
}

model News {
  id          BigInt      @id @default(autoincrement()) @map("quizs_idx")
  content     String?     @db.VarChar(255)
  choice1     String?     @map("choice_1") @db.VarChar(255)
  choice2     String?     @map("choice_2") @db.VarChar(255)
  choice3     String?     @map("choice_3") @db.VarChar(255)
  choice4     String?     @map("choice_4") @db.VarChar(255)
  answer      Int?
  newsImages  NewsImage[]

  @@map("news")
}

model NewsImage {
  imageId     String    @map("image_idx") @db.VarChar(255)
  news        News      @relation(fields: [newsId], references: [id])
  newsId      BigInt    @map("quizs_idx")
  imageUrl    String?   @map("image_url") @db.VarChar(255)

  @@id([imageId, newsId])
  @@map("news_image")
}

model HeatWave {
  id                BigInt    @id @default(autoincrement()) @map("heat_wave_idx")
  member           Members   @relation(fields: [memberId], references: [id])
  memberId         BigInt    @map("members_idx")
  location         String?   @db.VarChar(255)
  temperature      Int?
  feelTemperature  Int?      @map("feel_temperature")
  maxTemperature   Int?      @map("max_temperature")

  @@map("heat_wave")
}

enum UserType {
  GUARDIAN // 보호자
  ELDERLY  // 어르신
}

enum DeviceType {
  ANDROID
  IOS
}